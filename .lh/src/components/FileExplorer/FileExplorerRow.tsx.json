{
    "sourceFile": "src/components/FileExplorer/FileExplorerRow.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 23,
            "patches": [
                {
                    "date": 1720588768275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1720588774191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n const TreeFileName = styled(TreeFolderName)`\n   pointer-events: none;\n `\n \n-export const FileExplorer: React.FC = () => {\n+export const FileExplorerRow: React.FC = () => {\n   const {\n     openFolderById,\n     toggleDirectory,\n     root,\n"
                },
                {
                    "date": 1720588780356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n const TreeFileName = styled(TreeFolderName)`\n   pointer-events: none;\n `\n \n-export const FileExplorerRow: React.FC = () => {\n+export const FileExplorerRow: React.FC = ({ke}) => {\n   const {\n     openFolderById,\n     toggleDirectory,\n     root,\n"
                },
                {
                    "date": 1720588788264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n const TreeFileName = styled(TreeFolderName)`\n   pointer-events: none;\n `\n \n-export const FileExplorerRow: React.FC = ({ke}) => {\n+export const FileExplorerRow: React.FC = ({item}) => {\n   const {\n     openFolderById,\n     toggleDirectory,\n     root,\n"
                },
                {
                    "date": 1720588796363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n const TreeFileName = styled(TreeFolderName)`\n   pointer-events: none;\n `\n \n-export const FileExplorerRow: React.FC = ({item}) => {\n+export const FileExplorerRow: React.FC = ({item}: {{item}}) => {\n   const {\n     openFolderById,\n     toggleDirectory,\n     root,\n"
                },
                {
                    "date": 1720588803429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n import { ReactComponent as File } from \"../../assets/file.svg\"\n import { ReactComponent as Folder } from \"../../assets/folder.svg\"\n import { MainSpinner } from \"../Spinner/MainSpinner\"\n import { Spinner } from \"../Spinner\"\n+import { ExplorerFile } from './FileExplorer';\n \n export interface ExplorerFile {\n   id: string\n   name: string\n@@ -60,9 +61,9 @@\n const TreeFileName = styled(TreeFolderName)`\n   pointer-events: none;\n `\n \n-export const FileExplorerRow: React.FC = ({item}: {{item}}) => {\n+export const FileExplorerRow: React.FC = ({item}: {{item: ExplorerFile | E}}) => {\n   const {\n     openFolderById,\n     toggleDirectory,\n     root,\n"
                },
                {
                    "date": 1720588815981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n const TreeFileName = styled(TreeFolderName)`\n   pointer-events: none;\n `\n \n-export const FileExplorerRow: React.FC = ({item}: {{item: ExplorerFile | E}}) => {\n+export const FileExplorerRow: React.FC = ({item}: {{item: ExplorerFile | ExplorerDirectory}}) => {\n   const {\n     openFolderById,\n     toggleDirectory,\n     root,\n"
                },
                {
                    "date": 1720588824718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,145 @@\n+import React from \"react\"\n+import { useFileExplorer } from \"../../contexts/FileExplorer/FileExplorerProvider\"\n+import { styled } from \"styled-components\"\n+import { ReactComponent } from \"../../../custom\"\n+import { ReactComponent as File } from \"../../assets/file.svg\"\n+import { ReactComponent as Folder } from \"../../assets/folder.svg\"\n+import { MainSpinner } from \"../Spinner/MainSpinner\"\n+import { Spinner } from \"../Spinner\"\n+import { ExplorerFile } from './FileExplorer';\n+\n+export interface ExplorerFile {\n+  id: string\n+  name: string\n+  type: \"file\"\n+}\n+\n+export interface ExplorerDirectory {\n+  id: string\n+  name: string\n+\n+  type: \"directory\" | \"root\"\n+  children?: Array<ExplorerFile | ExplorerDirectory>\n+  isOpen?: boolean // Add this line\n+}\n+\n+const TreeContainer = styled.div`\n+  display: flex;\n+  flex-direction: column;\n+`\n+\n+const TreeChildren = styled.div`\n+  display: flex;\n+  flex-direction: column;\n+  margin-left: 36px;\n+`\n+\n+const TreeFolderName = styled.div`\n+  display: flex;\n+  flex-direction: row;\n+  align-items: center;\n+  gap: 4px;\n+  padding: 6px 4px;\n+  width: 100%;\n+`\n+\n+const TreeText = styled.div`\n+  display: flex;\n+  justify-content: flex-start;\n+  white-space: nowrap;\n+  overflow: hidden;\n+  text-overflow: ellipsis;\n+  width: 100%;\n+`\n+\n+const TreeTextEllipsis = styled.div`\n+  white-space: nowrap;\n+  overflow: hidden;\n+  text-overflow: ellipsis;\n+`\n+\n+const TreeFileName = styled(TreeFolderName)`\n+  pointer-events: none;\n+`\n+\n+export const FileExplorerRow: React.FC = ({item}: {{item: ExplorerFile | ExplorerDirectory}}) => {\n+  \n+\n+  if (!root) {\n+    return <MainSpinner />\n+  }\n+\n+  const renderDirectory = (dir: ExplorerDirectory) => {\n+    const children = folderChildrenById[dir.id]\n+    const isOpen = openFolderById[dir.id]\n+    return (\n+      <TreeContainer key={dir.id} onClick={(e) => handleToggle(e, dir)}>\n+        <TreeFolderName>\n+          <Folder />\n+          <TreeText>\n+            <TreeTextEllipsis> {dir.name}</TreeTextEllipsis>\n+          </TreeText>\n+        </TreeFolderName>\n+\n+        {isOpen && (\n+          <>\n+            {!children ? (\n+              <Spinner size={20} />\n+            ) : (\n+              <TreeChildren>\n+                {children?.map((child) =>\n+                  child.type === \"directory\" ? (\n+                    renderDirectory(child as ExplorerDirectory)\n+                  ) : (\n+                    <TreeFileName key={child.id}>\n+                      <File />\n+                      <TreeText>\n+                        <TreeTextEllipsis> {child.name}</TreeTextEllipsis>\n+                      </TreeText>\n+                    </TreeFileName>\n+                  ),\n+                )}\n+              </TreeChildren>\n+            )}\n+          </>\n+        )}\n+      </TreeContainer>\n+    )\n+  }\n+\n+  const renderChildren = ({ children }) => {\n+    return (\n+      <TreeChildren>\n+        {children?.map((item: ExplorerDirectory | ExplorerFile) =>\n+          item.type === \"directory\" ? (\n+            renderDirectory(item as ExplorerDirectory)\n+          ) : (\n+            <TreeFileName key={item.id}>\n+              <File />\n+              <TreeText>\n+                <TreeTextEllipsis> {item.name}</TreeTextEllipsis>\n+              </TreeText>\n+            </TreeFileName>\n+          ),\n+        )}\n+      </TreeChildren>\n+    )\n+  }\n+\n+  return (\n+    <TreeChildren>\n+      {root.children?.map((item: ExplorerDirectory | ExplorerFile) =>\n+        item.type === \"directory\" ? (\n+          renderDirectory(item as ExplorerDirectory)\n+        ) : (\n+          <TreeFileName key={item.id}>\n+            <File />\n+            <TreeText>\n+              <TreeTextEllipsis> {item.name}</TreeTextEllipsis>\n+            </TreeText>\n+          </TreeFileName>\n+        ),\n+      )}\n+    </TreeChildren>\n+  )\n+}\n"
                },
                {
                    "date": 1720588836406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,15 +61,10 @@\n const TreeFileName = styled(TreeFolderName)`\n   pointer-events: none;\n `\n \n-export const FileExplorerRow: React.FC = ({item}: {{item: ExplorerFile | ExplorerDirectory}}) => {\n+export const FileExplorerRow: React.FC = ({item}: {item: ExplorerFile | ExplorerDirectory}}) => {\n   \n-\n-  if (!root) {\n-    return <MainSpinner />\n-  }\n-\n   const renderDirectory = (dir: ExplorerDirectory) => {\n     const children = folderChildrenById[dir.id]\n     const isOpen = openFolderById[dir.id]\n     return (\n@@ -142,167 +137,4 @@\n       )}\n     </TreeChildren>\n   )\n }\n-import React from \"react\"\n-import { useFileExplorer } from \"../../contexts/FileExplorer/FileExplorerProvider\"\n-import { styled } from \"styled-components\"\n-import { ReactComponent } from \"../../../custom\"\n-import { ReactComponent as File } from \"../../assets/file.svg\"\n-import { ReactComponent as Folder } from \"../../assets/folder.svg\"\n-import { MainSpinner } from \"../Spinner/MainSpinner\"\n-import { Spinner } from \"../Spinner\"\n-import { ExplorerFile } from './FileExplorer';\n-\n-export interface ExplorerFile {\n-  id: string\n-  name: string\n-  type: \"file\"\n-}\n-\n-export interface ExplorerDirectory {\n-  id: string\n-  name: string\n-\n-  type: \"directory\" | \"root\"\n-  children?: Array<ExplorerFile | ExplorerDirectory>\n-  isOpen?: boolean // Add this line\n-}\n-\n-const TreeContainer = styled.div`\n-  display: flex;\n-  flex-direction: column;\n-`\n-\n-const TreeChildren = styled.div`\n-  display: flex;\n-  flex-direction: column;\n-  margin-left: 36px;\n-`\n-\n-const TreeFolderName = styled.div`\n-  display: flex;\n-  flex-direction: row;\n-  align-items: center;\n-  gap: 4px;\n-  padding: 6px 4px;\n-  width: 100%;\n-`\n-\n-const TreeText = styled.div`\n-  display: flex;\n-  justify-content: flex-start;\n-  white-space: nowrap;\n-  overflow: hidden;\n-  text-overflow: ellipsis;\n-  width: 100%;\n-`\n-\n-const TreeTextEllipsis = styled.div`\n-  white-space: nowrap;\n-  overflow: hidden;\n-  text-overflow: ellipsis;\n-`\n-\n-const TreeFileName = styled(TreeFolderName)`\n-  pointer-events: none;\n-`\n-\n-export const FileExplorerRow: React.FC = ({item}: {{item: ExplorerFile | ExplorerDirectory}}) => {\n-  const {\n-    openFolderById,\n-    toggleDirectory,\n-    root,\n-    fetchDirectory,\n-    folderChildrenById,\n-  } = useFileExplorer()\n-\n-  const handleToggle = async (\n-    e: React.MouseEvent<HTMLDivElement>,\n-    dir: ExplorerDirectory,\n-  ) => {\n-    e.stopPropagation()\n-    toggleDirectory(dir.id)\n-    const children = folderChildrenById[dir.id]\n-    if (!children) {\n-      await fetchDirectory(dir.id)\n-    }\n-  }\n-\n-  if (!root) {\n-    return <MainSpinner />\n-  }\n-\n-  const renderDirectory = (dir: ExplorerDirectory) => {\n-    const children = folderChildrenById[dir.id]\n-    const isOpen = openFolderById[dir.id]\n-    return (\n-      <TreeContainer key={dir.id} onClick={(e) => handleToggle(e, dir)}>\n-        <TreeFolderName>\n-          <Folder />\n-          <TreeText>\n-            <TreeTextEllipsis> {dir.name}</TreeTextEllipsis>\n-          </TreeText>\n-        </TreeFolderName>\n-\n-        {isOpen && (\n-          <>\n-            {!children ? (\n-              <Spinner size={20} />\n-            ) : (\n-              <TreeChildren>\n-                {children?.map((child) =>\n-                  child.type === \"directory\" ? (\n-                    renderDirectory(child as ExplorerDirectory)\n-                  ) : (\n-                    <TreeFileName key={child.id}>\n-                      <File />\n-                      <TreeText>\n-                        <TreeTextEllipsis> {child.name}</TreeTextEllipsis>\n-                      </TreeText>\n-                    </TreeFileName>\n-                  ),\n-                )}\n-              </TreeChildren>\n-            )}\n-          </>\n-        )}\n-      </TreeContainer>\n-    )\n-  }\n-\n-  const renderChildren = ({ children }) => {\n-    return (\n-      <TreeChildren>\n-        {children?.map((item: ExplorerDirectory | ExplorerFile) =>\n-          item.type === \"directory\" ? (\n-            renderDirectory(item as ExplorerDirectory)\n-          ) : (\n-            <TreeFileName key={item.id}>\n-              <File />\n-              <TreeText>\n-                <TreeTextEllipsis> {item.name}</TreeTextEllipsis>\n-              </TreeText>\n-            </TreeFileName>\n-          ),\n-        )}\n-      </TreeChildren>\n-    )\n-  }\n-\n-  return (\n-    <TreeChildren>\n-      {root.children?.map((item: ExplorerDirectory | ExplorerFile) =>\n-        item.type === \"directory\" ? (\n-          renderDirectory(item as ExplorerDirectory)\n-        ) : (\n-          <TreeFileName key={item.id}>\n-            <File />\n-            <TreeText>\n-              <TreeTextEllipsis> {item.name}</TreeTextEllipsis>\n-            </TreeText>\n-          </TreeFileName>\n-        ),\n-      )}\n-    </TreeChildren>\n-  )\n-}\n"
                },
                {
                    "date": 1720588855442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,147 @@\n+import React from \"react\"\n+import { useFileExplorer } from \"../../contexts/FileExplorer/FileExplorerProvider\"\n+import { styled } from \"styled-components\"\n+import { ReactComponent } from \"../../../custom\"\n+import { ReactComponent as File } from \"../../assets/file.svg\"\n+import { ReactComponent as Folder } from \"../../assets/folder.svg\"\n+import { MainSpinner } from \"../Spinner/MainSpinner\"\n+import { Spinner } from \"../Spinner\"\n+import { ExplorerFile } from './FileExplorer';\n+\n+export interface ExplorerFile {\n+  id: string\n+  name: string\n+  type: \"file\"\n+}\n+\n+export interface ExplorerDirectory {\n+  id: string\n+  name: string\n+\n+  type: \"directory\" | \"root\"\n+  children?: Array<ExplorerFile | ExplorerDirectory>\n+  isOpen?: boolean // Add this line\n+}\n+\n+const TreeContainer = styled.div`\n+  display: flex;\n+  flex-direction: column;\n+`\n+\n+const TreeChildren = styled.div`\n+  display: flex;\n+  flex-direction: column;\n+  margin-left: 36px;\n+`\n+\n+const TreeFolderName = styled.div`\n+  display: flex;\n+  flex-direction: row;\n+  align-items: center;\n+  gap: 4px;\n+  padding: 6px 4px;\n+  width: 100%;\n+`\n+\n+const TreeText = styled.div`\n+  display: flex;\n+  justify-content: flex-start;\n+  white-space: nowrap;\n+  overflow: hidden;\n+  text-overflow: ellipsis;\n+  width: 100%;\n+`\n+\n+const TreeTextEllipsis = styled.div`\n+  white-space: nowrap;\n+  overflow: hidden;\n+  text-overflow: ellipsis;\n+`\n+\n+const TreeFileName = styled(TreeFolderName)`\n+  pointer-events: none;\n+`\n+\n+export const FileExplorerRow: React.FC = ({item}: {item: ExplorerFile | ExplorerDirectory}) => {\n+  \n+\n+  return   <TreeFolderName>\n+  <Folder />\n+  <TreeText>\n+    <TreeTextEllipsis> {dir.name}</TreeTextEllipsis>\n+  </TreeText>\n+</TreeFolderName>\n+  const renderDirectory = (dir: ExplorerDirectory) => {\n+    const children = folderChildrenById[dir.id]\n+    const isOpen = openFolderById[dir.id]\n+    return (\n+      <TreeContainer key={dir.id} onClick={(e) => handleToggle(e, dir)}>\n+        <TreeFolderName>\n+          <Folder />\n+          <TreeText>\n+            <TreeTextEllipsis> {dir.name}</TreeTextEllipsis>\n+          </TreeText>\n+        </TreeFolderName>\n+\n+        {isOpen && (\n+          <>\n+            {!children ? (\n+              <Spinner size={20} />\n+            ) : (\n+              <TreeChildren>\n+                {children?.map((child) =>\n+                  child.type === \"directory\" ? (\n+                    renderDirectory(child as ExplorerDirectory)\n+                  ) : (\n+                    <TreeFileName key={child.id}>\n+                      <File />\n+                      <TreeText>\n+                        <TreeTextEllipsis> {child.name}</TreeTextEllipsis>\n+                      </TreeText>\n+                    </TreeFileName>\n+                  ),\n+                )}\n+              </TreeChildren>\n+            )}\n+          </>\n+        )}\n+      </TreeContainer>\n+    )\n+  }\n+\n+  const renderChildren = ({ children }) => {\n+    return (\n+      <TreeChildren>\n+        {children?.map((item: ExplorerDirectory | ExplorerFile) =>\n+          item.type === \"directory\" ? (\n+            renderDirectory(item as ExplorerDirectory)\n+          ) : (\n+            <TreeFileName key={item.id}>\n+              <File />\n+              <TreeText>\n+                <TreeTextEllipsis> {item.name}</TreeTextEllipsis>\n+              </TreeText>\n+            </TreeFileName>\n+          ),\n+        )}\n+      </TreeChildren>\n+    )\n+  }\n+\n+  return (\n+    <TreeChildren>\n+      {root.children?.map((item: ExplorerDirectory | ExplorerFile) =>\n+        item.type === \"directory\" ? (\n+          renderDirectory(item as ExplorerDirectory)\n+        ) : (\n+          <TreeFileName key={item.id}>\n+            <File />\n+            <TreeText>\n+              <TreeTextEllipsis> {item.name}</TreeTextEllipsis>\n+            </TreeText>\n+          </TreeFileName>\n+        ),\n+      )}\n+    </TreeChildren>\n+  )\n+}\n"
                },
                {
                    "date": 1720588861091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,14 +64,14 @@\n \n export const FileExplorerRow: React.FC = ({item}: {item: ExplorerFile | ExplorerDirectory}) => {\n   \n \n-  return   <TreeFolderName>\n+  return   (<TreeFolderName>\n   <Folder />\n   <TreeText>\n     <TreeTextEllipsis> {dir.name}</TreeTextEllipsis>\n   </TreeText>\n-</TreeFolderName>\n+</TreeFolderName>;\n   const renderDirectory = (dir: ExplorerDirectory) => {\n     const children = folderChildrenById[dir.id]\n     const isOpen = openFolderById[dir.id]\n     return (\n@@ -144,144 +144,4 @@\n       )}\n     </TreeChildren>\n   )\n }\n-import React from \"react\"\n-import { useFileExplorer } from \"../../contexts/FileExplorer/FileExplorerProvider\"\n-import { styled } from \"styled-components\"\n-import { ReactComponent } from \"../../../custom\"\n-import { ReactComponent as File } from \"../../assets/file.svg\"\n-import { ReactComponent as Folder } from \"../../assets/folder.svg\"\n-import { MainSpinner } from \"../Spinner/MainSpinner\"\n-import { Spinner } from \"../Spinner\"\n-import { ExplorerFile } from './FileExplorer';\n-\n-export interface ExplorerFile {\n-  id: string\n-  name: string\n-  type: \"file\"\n-}\n-\n-export interface ExplorerDirectory {\n-  id: string\n-  name: string\n-\n-  type: \"directory\" | \"root\"\n-  children?: Array<ExplorerFile | ExplorerDirectory>\n-  isOpen?: boolean // Add this line\n-}\n-\n-const TreeContainer = styled.div`\n-  display: flex;\n-  flex-direction: column;\n-`\n-\n-const TreeChildren = styled.div`\n-  display: flex;\n-  flex-direction: column;\n-  margin-left: 36px;\n-`\n-\n-const TreeFolderName = styled.div`\n-  display: flex;\n-  flex-direction: row;\n-  align-items: center;\n-  gap: 4px;\n-  padding: 6px 4px;\n-  width: 100%;\n-`\n-\n-const TreeText = styled.div`\n-  display: flex;\n-  justify-content: flex-start;\n-  white-space: nowrap;\n-  overflow: hidden;\n-  text-overflow: ellipsis;\n-  width: 100%;\n-`\n-\n-const TreeTextEllipsis = styled.div`\n-  white-space: nowrap;\n-  overflow: hidden;\n-  text-overflow: ellipsis;\n-`\n-\n-const TreeFileName = styled(TreeFolderName)`\n-  pointer-events: none;\n-`\n-\n-export const FileExplorerRow: React.FC = ({item}: {item: ExplorerFile | ExplorerDirectory}}) => {\n-  \n-  const renderDirectory = (dir: ExplorerDirectory) => {\n-    const children = folderChildrenById[dir.id]\n-    const isOpen = openFolderById[dir.id]\n-    return (\n-      <TreeContainer key={dir.id} onClick={(e) => handleToggle(e, dir)}>\n-        <TreeFolderName>\n-          <Folder />\n-          <TreeText>\n-            <TreeTextEllipsis> {dir.name}</TreeTextEllipsis>\n-          </TreeText>\n-        </TreeFolderName>\n-\n-        {isOpen && (\n-          <>\n-            {!children ? (\n-              <Spinner size={20} />\n-            ) : (\n-              <TreeChildren>\n-                {children?.map((child) =>\n-                  child.type === \"directory\" ? (\n-                    renderDirectory(child as ExplorerDirectory)\n-                  ) : (\n-                    <TreeFileName key={child.id}>\n-                      <File />\n-                      <TreeText>\n-                        <TreeTextEllipsis> {child.name}</TreeTextEllipsis>\n-                      </TreeText>\n-                    </TreeFileName>\n-                  ),\n-                )}\n-              </TreeChildren>\n-            )}\n-          </>\n-        )}\n-      </TreeContainer>\n-    )\n-  }\n-\n-  const renderChildren = ({ children }) => {\n-    return (\n-      <TreeChildren>\n-        {children?.map((item: ExplorerDirectory | ExplorerFile) =>\n-          item.type === \"directory\" ? (\n-            renderDirectory(item as ExplorerDirectory)\n-          ) : (\n-            <TreeFileName key={item.id}>\n-              <File />\n-              <TreeText>\n-                <TreeTextEllipsis> {item.name}</TreeTextEllipsis>\n-              </TreeText>\n-            </TreeFileName>\n-          ),\n-        )}\n-      </TreeChildren>\n-    )\n-  }\n-\n-  return (\n-    <TreeChildren>\n-      {root.children?.map((item: ExplorerDirectory | ExplorerFile) =>\n-        item.type === \"directory\" ? (\n-          renderDirectory(item as ExplorerDirectory)\n-        ) : (\n-          <TreeFileName key={item.id}>\n-            <File />\n-            <TreeText>\n-              <TreeTextEllipsis> {item.name}</TreeTextEllipsis>\n-            </TreeText>\n-          </TreeFileName>\n-        ),\n-      )}\n-    </TreeChildren>\n-  )\n-}\n"
                },
                {
                    "date": 1720588866852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,14 +64,14 @@\n \n export const FileExplorerRow: React.FC = ({item}: {item: ExplorerFile | ExplorerDirectory}) => {\n   \n \n-  return   (<TreeFolderName>\n+  return   (<TreeFolderName >\n   <Folder />\n   <TreeText>\n     <TreeTextEllipsis> {dir.name}</TreeTextEllipsis>\n   </TreeText>\n-</TreeFolderName>;\n+</TreeFolderName>);\n   const renderDirectory = (dir: ExplorerDirectory) => {\n     const children = folderChildrenById[dir.id]\n     const isOpen = openFolderById[dir.id]\n     return (\n"
                },
                {
                    "date": 1720588880496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,12 +64,12 @@\n \n export const FileExplorerRow: React.FC = ({item}: {item: ExplorerFile | ExplorerDirectory}) => {\n   \n \n-  return   (<TreeFolderName >\n+  return   (<TreeFolderName>\n   <Folder />\n   <TreeText>\n-    <TreeTextEllipsis> {dir.name}</TreeTextEllipsis>\n+    <TreeTextEllipsis> {item.name}</TreeTextEllipsis>\n   </TreeText>\n </TreeFolderName>);\n   const renderDirectory = (dir: ExplorerDirectory) => {\n     const children = folderChildrenById[dir.id]\n"
                },
                {
                    "date": 1720588889342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,78 +70,6 @@\n   <TreeText>\n     <TreeTextEllipsis> {item.name}</TreeTextEllipsis>\n   </TreeText>\n </TreeFolderName>);\n-  const renderDirectory = (dir: ExplorerDirectory) => {\n-    const children = folderChildrenById[dir.id]\n-    const isOpen = openFolderById[dir.id]\n-    return (\n-      <TreeContainer key={dir.id} onClick={(e) => handleToggle(e, dir)}>\n-        <TreeFolderName>\n-          <Folder />\n-          <TreeText>\n-            <TreeTextEllipsis> {dir.name}</TreeTextEllipsis>\n-          </TreeText>\n-        </TreeFolderName>\n-\n-        {isOpen && (\n-          <>\n-            {!children ? (\n-              <Spinner size={20} />\n-            ) : (\n-              <TreeChildren>\n-                {children?.map((child) =>\n-                  child.type === \"directory\" ? (\n-                    renderDirectory(child as ExplorerDirectory)\n-                  ) : (\n-                    <TreeFileName key={child.id}>\n-                      <File />\n-                      <TreeText>\n-                        <TreeTextEllipsis> {child.name}</TreeTextEllipsis>\n-                      </TreeText>\n-                    </TreeFileName>\n-                  ),\n-                )}\n-              </TreeChildren>\n-            )}\n-          </>\n-        )}\n-      </TreeContainer>\n-    )\n-  }\n-\n-  const renderChildren = ({ children }) => {\n-    return (\n-      <TreeChildren>\n-        {children?.map((item: ExplorerDirectory | ExplorerFile) =>\n-          item.type === \"directory\" ? (\n-            renderDirectory(item as ExplorerDirectory)\n-          ) : (\n-            <TreeFileName key={item.id}>\n-              <File />\n-              <TreeText>\n-                <TreeTextEllipsis> {item.name}</TreeTextEllipsis>\n-              </TreeText>\n-            </TreeFileName>\n-          ),\n-        )}\n-      </TreeChildren>\n-    )\n-  }\n-\n-  return (\n-    <TreeChildren>\n-      {root.children?.map((item: ExplorerDirectory | ExplorerFile) =>\n-        item.type === \"directory\" ? (\n-          renderDirectory(item as ExplorerDirectory)\n-        ) : (\n-          <TreeFileName key={item.id}>\n-            <File />\n-            <TreeText>\n-              <TreeTextEllipsis> {item.name}</TreeTextEllipsis>\n-            </TreeText>\n-          </TreeFileName>\n-        ),\n-      )}\n-    </TreeChildren>\n-  )\n+ \n }\n"
                },
                {
                    "date": 1720589124298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,40 +1,9 @@\n-import React from \"react\"\n-import { useFileExplorer } from \"../../contexts/FileExplorer/FileExplorerProvider\"\n+import React, { ReactNode } from \"react\"\n import { styled } from \"styled-components\"\n-import { ReactComponent } from \"../../../custom\"\n-import { ReactComponent as File } from \"../../assets/file.svg\"\n import { ReactComponent as Folder } from \"../../assets/folder.svg\"\n-import { MainSpinner } from \"../Spinner/MainSpinner\"\n-import { Spinner } from \"../Spinner\"\n-import { ExplorerFile } from './FileExplorer';\n+import { ExplorerDirectory, ExplorerFile } from \"./FileExplorer\"\n \n-export interface ExplorerFile {\n-  id: string\n-  name: string\n-  type: \"file\"\n-}\n-\n-export interface ExplorerDirectory {\n-  id: string\n-  name: string\n-\n-  type: \"directory\" | \"root\"\n-  children?: Array<ExplorerFile | ExplorerDirectory>\n-  isOpen?: boolean // Add this line\n-}\n-\n-const TreeContainer = styled.div`\n-  display: flex;\n-  flex-direction: column;\n-`\n-\n-const TreeChildren = styled.div`\n-  display: flex;\n-  flex-direction: column;\n-  margin-left: 36px;\n-`\n-\n const TreeFolderName = styled.div`\n   display: flex;\n   flex-direction: row;\n   align-items: center;\n@@ -57,19 +26,25 @@\n   overflow: hidden;\n   text-overflow: ellipsis;\n `\n \n-const TreeFileName = styled(TreeFolderName)`\n-  pointer-events: none;\n-`\n+const iconByType: { [key: string]: ReactNode } = {\n+  file: File,\n+  directory: Folder,\n+}\n \n-export const FileExplorerRow: React.FC = ({item}: {item: ExplorerFile | ExplorerDirectory}) => {\n-  \n+export const FileExplorerRow: React.FC = ({\n+  item,\n+}: {\n+  item: ExplorerFile | ExplorerDirectory\n+}) => {\n+  const Icon = iconByType[item.type]\n \n-  return   (<TreeFolderName>\n-  <Folder />\n-  <TreeText>\n-    <TreeTextEllipsis> {item.name}</TreeTextEllipsis>\n-  </TreeText>\n-</TreeFolderName>);\n- \n+  return (\n+    <TreeFolderName>\n+      <Icon />\n+      <TreeText>\n+        <TreeTextEllipsis> {item.name}</TreeTextEllipsis>\n+      </TreeText>\n+    </TreeFolderName>\n+  )\n }\n"
                },
                {
                    "date": 1720589129993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n   text-overflow: ellipsis;\n `\n \n const iconByType: { [key: string]: ReactNode } = {\n-  file: File,\n+  \"file\": File,\n   directory: Folder,\n }\n \n export const FileExplorerRow: React.FC = ({\n"
                },
                {
                    "date": 1720589151202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n `\n \n const iconByType: { [key: string]: ReactNode } = {\n   \"file\": File,\n-  directory: Folder,\n+  \"directory\": Folder as ReactNode,\n }\n \n export const FileExplorerRow: React.FC = ({\n   item,\n"
                },
                {
                    "date": 1720589165534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n   const Icon = iconByType[item.type]\n \n   return (\n     <TreeFolderName>\n-      <Icon />\n+      {}\n       <TreeText>\n         <TreeTextEllipsis> {item.name}</TreeTextEllipsis>\n       </TreeText>\n     </TreeFolderName>\n"
                },
                {
                    "date": 1720589171881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n   const Icon = iconByType[item.type]\n \n   return (\n     <TreeFolderName>\n-      {}\n+      {item.type === \"directory\" && <Icon />}\n       <TreeText>\n         <TreeTextEllipsis> {item.name}</TreeTextEllipsis>\n       </TreeText>\n     </TreeFolderName>\n"
                },
                {
                    "date": 1720589178509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n   const Icon = iconByType[item.type]\n \n   return (\n     <TreeFolderName>\n-      {item.type === \"directory\" && <Icon />}\n+      {item.type === \"directory\" ? <Folder />}\n       <TreeText>\n         <TreeTextEllipsis> {item.name}</TreeTextEllipsis>\n       </TreeText>\n     </TreeFolderName>\n"
                },
                {
                    "date": 1720589183777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n   const Icon = iconByType[item.type]\n \n   return (\n     <TreeFolderName>\n-      {item.type === \"directory\" ? <Folder />}\n+      {item.type === \"directory\" ? <Folder /> : }\n       <TreeText>\n         <TreeTextEllipsis> {item.name}</TreeTextEllipsis>\n       </TreeText>\n     </TreeFolderName>\n"
                },
                {
                    "date": 1720589196290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,9 @@\n import React, { ReactNode } from \"react\"\n import { styled } from \"styled-components\"\n import { ReactComponent as Folder } from \"../../assets/folder.svg\"\n+import { ReactComponent as Folder } from \"../../assets/folder.svg\"\n+\n import { ExplorerDirectory, ExplorerFile } from \"./FileExplorer\"\n \n const TreeFolderName = styled.div`\n   display: flex;\n@@ -40,9 +42,9 @@\n   const Icon = iconByType[item.type]\n \n   return (\n     <TreeFolderName>\n-      {item.type === \"directory\" ? <Folder /> : }\n+      {item.type === \"directory\" ? <Folder /> : <File />}\n       <TreeText>\n         <TreeTextEllipsis> {item.name}</TreeTextEllipsis>\n       </TreeText>\n     </TreeFolderName>\n"
                },
                {
                    "date": 1720589202314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import React, { ReactNode } from \"react\"\n import { styled } from \"styled-components\"\n import { ReactComponent as Folder } from \"../../assets/folder.svg\"\n-import { ReactComponent as File } from \"../../assets/folder.svg\"\n+import { ReactComponent as File } from \"../../assets/file.svg\"\n \n import { ExplorerDirectory, ExplorerFile } from \"./FileExplorer\"\n \n const TreeFolderName = styled.div`\n"
                },
                {
                    "date": 1720589310223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,7 +46,7 @@\n       {item.type === \"directory\" ? <Folder /> : <File />}\n       <TreeText>\n         <TreeTextEllipsis> {item.name}</TreeTextEllipsis>\n       </TreeText>\n-    </TreeFolderName>\n+    </Container>\n   )\n }\n"
                }
            ],
            "date": 1720588768275,
            "name": "Commit-0",
            "content": "import React from \"react\"\nimport { useFileExplorer } from \"../../contexts/FileExplorer/FileExplorerProvider\"\nimport { styled } from \"styled-components\"\nimport { ReactComponent } from \"../../../custom\"\nimport { ReactComponent as File } from \"../../assets/file.svg\"\nimport { ReactComponent as Folder } from \"../../assets/folder.svg\"\nimport { MainSpinner } from \"../Spinner/MainSpinner\"\nimport { Spinner } from \"../Spinner\"\n\nexport interface ExplorerFile {\n  id: string\n  name: string\n  type: \"file\"\n}\n\nexport interface ExplorerDirectory {\n  id: string\n  name: string\n\n  type: \"directory\" | \"root\"\n  children?: Array<ExplorerFile | ExplorerDirectory>\n  isOpen?: boolean // Add this line\n}\n\nconst TreeContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst TreeChildren = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-left: 36px;\n`\n\nconst TreeFolderName = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  gap: 4px;\n  padding: 6px 4px;\n  width: 100%;\n`\n\nconst TreeText = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  width: 100%;\n`\n\nconst TreeTextEllipsis = styled.div`\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`\n\nconst TreeFileName = styled(TreeFolderName)`\n  pointer-events: none;\n`\n\nexport const FileExplorer: React.FC = () => {\n  const {\n    openFolderById,\n    toggleDirectory,\n    root,\n    fetchDirectory,\n    folderChildrenById,\n  } = useFileExplorer()\n\n  const handleToggle = async (\n    e: React.MouseEvent<HTMLDivElement>,\n    dir: ExplorerDirectory,\n  ) => {\n    e.stopPropagation()\n    toggleDirectory(dir.id)\n    const children = folderChildrenById[dir.id]\n    if (!children) {\n      await fetchDirectory(dir.id)\n    }\n  }\n\n  if (!root) {\n    return <MainSpinner />\n  }\n\n  const renderDirectory = (dir: ExplorerDirectory) => {\n    const children = folderChildrenById[dir.id]\n    const isOpen = openFolderById[dir.id]\n    return (\n      <TreeContainer key={dir.id} onClick={(e) => handleToggle(e, dir)}>\n        <TreeFolderName>\n          <Folder />\n          <TreeText>\n            <TreeTextEllipsis> {dir.name}</TreeTextEllipsis>\n          </TreeText>\n        </TreeFolderName>\n\n        {isOpen && (\n          <>\n            {!children ? (\n              <Spinner size={20} />\n            ) : (\n              <TreeChildren>\n                {children?.map((child) =>\n                  child.type === \"directory\" ? (\n                    renderDirectory(child as ExplorerDirectory)\n                  ) : (\n                    <TreeFileName key={child.id}>\n                      <File />\n                      <TreeText>\n                        <TreeTextEllipsis> {child.name}</TreeTextEllipsis>\n                      </TreeText>\n                    </TreeFileName>\n                  ),\n                )}\n              </TreeChildren>\n            )}\n          </>\n        )}\n      </TreeContainer>\n    )\n  }\n\n  const renderChildren = ({ children }) => {\n    return (\n      <TreeChildren>\n        {children?.map((item: ExplorerDirectory | ExplorerFile) =>\n          item.type === \"directory\" ? (\n            renderDirectory(item as ExplorerDirectory)\n          ) : (\n            <TreeFileName key={item.id}>\n              <File />\n              <TreeText>\n                <TreeTextEllipsis> {item.name}</TreeTextEllipsis>\n              </TreeText>\n            </TreeFileName>\n          ),\n        )}\n      </TreeChildren>\n    )\n  }\n\n  return (\n    <TreeChildren>\n      {root.children?.map((item: ExplorerDirectory | ExplorerFile) =>\n        item.type === \"directory\" ? (\n          renderDirectory(item as ExplorerDirectory)\n        ) : (\n          <TreeFileName key={item.id}>\n            <File />\n            <TreeText>\n              <TreeTextEllipsis> {item.name}</TreeTextEllipsis>\n            </TreeText>\n          </TreeFileName>\n        ),\n      )}\n    </TreeChildren>\n  )\n}\n"
        }
    ]
}