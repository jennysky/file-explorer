{
    "sourceFile": "src/components/FileExplorer/FileExplorer.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 21,
            "patches": [
                {
                    "date": 1720559540139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1720559553725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,31 +1,67 @@\n-import React, { useState } from 'react';\n+import React, { useState } from \"react\"\n \n const FileExplorer: React.FC<{ data: Directory }> = ({ data }) => {\n-  const [rootDir, setRootDir] = useState<Directory>(data);\n+  const [rootDir, setRootDir] = useState<Directory>(data)\n \n   const toggleDirectory = (id: string) => {\n     const toggle = (dir: Directory): Directory => ({\n       ...dir,\n       isOpen: dir.id === id ? !dir.isOpen : dir.isOpen,\n-      children: dir.children.map(child => child.type === 'directory' ? toggle(child as Directory) : child),\n-    });\n+      children: dir.children.map((child) =>\n+        child.type === \"directory\" ? toggle(child as Directory) : child\n+      ),\n+    })\n \n-    setRootDir(toggle(rootDir));\n-  };\n+    setRootDir(toggle(rootDir))\n+  }\n \n   const renderDirectory = (dir: Directory) => (\n     <li key={dir.id} onClick={() => toggleDirectory(dir.id)}>\n       {dir.name}\n-      {dir.isOpen && <ul>{dir.children.map(child => child.type === 'directory' ? renderDirectory(child as Directory) : <li key={child.id}>{child.name}</li>)}</ul>}\n+      {dir.isOpen && (\n+        <ul>\n+          {dir.children.map((child) =>\n+            child.type === \"directory\" ? (\n+              renderDirectory(child as Directory)\n+            ) : (\n+              <li key={child.id}>{child.name}</li>\n+            )\n+          )}\n+        </ul>\n+      )}\n     </li>\n-  );\n+  )\n \n   return (\n     <div>\n       <h2>{rootDir.name}</h2>\n       <ul>\n-        {rootDir.children.map(item => item.type === 'directory' ? renderDirectory(item as Directory) : <li key={item.id}>{item.name}</li>)}\n+        {rootDir.children.map((item) =>\n+          item.type === \"directory\" ? (\n+            renderDirectory(item as Directory)\n+          ) : (\n+            <li key={item.id}>{item.name}</li>\n+          )\n+        )}\n       </ul>\n     </div>\n-  );\n+  )\n+}\n+const sampleData: Directory = {\n+  id: 'root',\n+  name: 'Root',\n+  type: 'directory',\n+  isOpen: true, // Root directory is initially open\n+  children: [\n+    { id: '1', name: 'File1.txt', type: 'file' },\n+    {\n+      id: '2',\n+      name: 'Folder1',\n+      type: 'directory',\n+      isOpen: false, // This directory is initially closed\n+      children: [\n+        { id: '3', name: 'File2.txt', type: 'file' },\n+      ],\n+    },\n+  ],\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720559568266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,27 @@\n import React, { useState } from \"react\"\n \n+\n+\n+const sampleData: Directory = {\n+    id: 'root',\n+    name: 'Root',\n+    type: 'directory',\n+    isOpen: true, // Root directory is initially open\n+    children: [\n+      { id: '1', name: 'File1.txt', type: 'file' },\n+      {\n+        id: '2',\n+        name: 'Folder1',\n+        type: 'directory',\n+        isOpen: false, // This directory is initially closed\n+        children: [\n+          { id: '3', name: 'File2.txt', type: 'file' },\n+        ],\n+      },\n+    ],\n+  };\n+\n const FileExplorer: React.FC<{ data: Directory }> = ({ data }) => {\n   const [rootDir, setRootDir] = useState<Directory>(data)\n \n   const toggleDirectory = (id: string) => {\n@@ -45,23 +66,5 @@\n         )}\n       </ul>\n     </div>\n   )\n-}\n-const sampleData: Directory = {\n-  id: 'root',\n-  name: 'Root',\n-  type: 'directory',\n-  isOpen: true, // Root directory is initially open\n-  children: [\n-    { id: '1', name: 'File1.txt', type: 'file' },\n-    {\n-      id: '2',\n-      name: 'Folder1',\n-      type: 'directory',\n-      isOpen: false, // This directory is initially closed\n-      children: [\n-        { id: '3', name: 'File2.txt', type: 'file' },\n-      ],\n-    },\n-  ],\n-};\n\\ No newline at end of file\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720559575162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,14 @@\n import React, { useState } from \"react\"\n \n \n-\n+interface Directory {\n+  id: string;\n+  name: string;\n+  type: 'directory';\n+  children: Array<File | Directory>;\n+  isOpen?: boolean; // Add this line\n+}\n const sampleData: Directory = {\n     id: 'root',\n     name: 'Root',\n     type: 'directory',\n"
                },
                {
                    "date": 1720559584129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n   type: 'directory';\n   children: Array<File | Directory>;\n   isOpen?: boolean; // Add this line\n }\n+\n const sampleData: Directory = {\n     id: 'root',\n     name: 'Root',\n     type: 'directory',\n@@ -26,9 +27,9 @@\n       },\n     ],\n   };\n \n-const FileExplorer: React.FC<{ data: Directory }> = ({ data }) => {\n+export const FileExplorer: React.FC<{ data: Directory }> = ({ data }) => {\n   const [rootDir, setRootDir] = useState<Directory>(data)\n \n   const toggleDirectory = (id: string) => {\n     const toggle = (dir: Directory): Directory => ({\n"
                },
                {
                    "date": 1720559637235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n       },\n     ],\n   };\n \n-export const FileExplorer: React.FC<{ data: Directory }> = ({ data }) => {\n+export const FileExplorer: React.FC<{ data: Directory }> = ({ data =  }) => {\n   const [rootDir, setRootDir] = useState<Directory>(data)\n \n   const toggleDirectory = (id: string) => {\n     const toggle = (dir: Directory): Directory => ({\n"
                },
                {
                    "date": 1720559642908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n       },\n     ],\n   };\n \n-export const FileExplorer: React.FC<{ data: Directory }> = ({ data =  }) => {\n+export const FileExplorer: React.FC<{ data: Directory }> = ({ data = sampleData }) => {\n   const [rootDir, setRootDir] = useState<Directory>(data)\n \n   const toggleDirectory = (id: string) => {\n     const toggle = (dir: Directory): Directory => ({\n"
                },
                {
                    "date": 1720559648967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import React, { useState } from \"react\"\n \n \n+\n interface Directory {\n   id: string;\n   name: string;\n   type: 'directory';\n"
                },
                {
                    "date": 1720559728234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,12 @@\n import React, { useState } from \"react\"\n \n+export interface File {\n+  id: string;\n+  name: string;\n+  type: 'file';\n+}\n \n-\n interface Directory {\n   id: string;\n   name: string;\n   type: 'directory';\n"
                },
                {
                    "date": 1720564136105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,82 @@\n+import React, { useState } from \"react\"\n+\n+export interface File {\n+  id: string\n+  name: string\n+  type: \"file\"\n+}\n+\n+export interface Directory {\n+  id: string\n+  name: string\n+  type: \"directory\"\n+  children: Array<File | Directory>\n+  isOpen?: boolean // Add this line\n+}\n+\n+const sampleData: Directory = {\n+  id: \"root\",\n+  name: \"Root\",\n+  type: \"directory\",\n+  isOpen: true, // Root directory is initially open\n+  children: [\n+    { id: \"1\", name: \"File1.txt\", type: \"file\" },\n+    {\n+      id: \"2\",\n+      name: \"Folder1\",\n+      type: \"directory\",\n+      isOpen: false, // This directory is initially closed\n+      children: [{ id: \"3\", name: \"File2.txt\", type: \"file\" }],\n+    },\n+  ],\n+}\n+\n+export const FileExplorer: React.FC<{ data: Directory }> = ({\n+  data,\n+}) => {\n+  const [rootDir, setRootDir] = useState<Directory>(data)\n+\n+  const toggleDirectory = (id: string) => {\n+    const toggle = (dir: Directory): Directory => ({\n+      ...dir,\n+      isOpen: dir.id === id ? !dir.isOpen : dir.isOpen,\n+      children: dir.children.map((child) =>\n+        child.type === \"directory\" ? toggle(child as Directory) : child\n+      ),\n+    })\n+\n+    setRootDir(toggle(rootDir))\n+  }\n+\n+  const renderDirectory = (dir: Directory) => (\n+    <li key={dir.id} onClick={() => toggleDirectory(dir.id)}>\n+      {dir.name}\n+      {dir.isOpen && (\n+        <ul>\n+          {dir.children.map((child) =>\n+            child.type === \"directory\" ? (\n+              renderDirectory(child as Directory)\n+            ) : (\n+              <li key={child.id}>{child.name}</li>\n+            )\n+          )}\n+        </ul>\n+      )}\n+    </li>\n+  )\n+\n+  return (\n+    <div>\n+      <h2>{rootDir.name}</h2>\n+      <ul>\n+        {rootDir.children.map((item) =>\n+          item.type === \"directory\" ? (\n+            renderDirectory(item as Directory)\n+          ) : (\n+            <li key={item.id}>{item.name}</li>\n+          )\n+        )}\n+      </ul>\n+    </div>\n+  )\n+}\n"
                },
                {
                    "date": 1720564143493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,25 +13,8 @@\n   children: Array<File | Directory>\n   isOpen?: boolean // Add this line\n }\n \n-const sampleData: Directory = {\n-  id: \"root\",\n-  name: \"Root\",\n-  type: \"directory\",\n-  isOpen: true, // Root directory is initially open\n-  children: [\n-    { id: \"1\", name: \"File1.txt\", type: \"file\" },\n-    {\n-      id: \"2\",\n-      name: \"Folder1\",\n-      type: \"directory\",\n-      isOpen: false, // This directory is initially closed\n-      children: [{ id: \"3\", name: \"File2.txt\", type: \"file\" }],\n-    },\n-  ],\n-}\n-\n export const FileExplorer: React.FC<{ data: Directory }> = ({\n   data,\n }) => {\n   const [rootDir, setRootDir] = useState<Directory>(data)\n@@ -79,86 +62,4 @@\n       </ul>\n     </div>\n   )\n }\n-import React, { useState } from \"react\"\n-\n-export interface File {\n-  id: string;\n-  name: string;\n-  type: 'file';\n-}\n-\n-interface Directory {\n-  id: string;\n-  name: string;\n-  type: 'directory';\n-  children: Array<File | Directory>;\n-  isOpen?: boolean; // Add this line\n-}\n-\n-const sampleData: Directory = {\n-    id: 'root',\n-    name: 'Root',\n-    type: 'directory',\n-    isOpen: true, // Root directory is initially open\n-    children: [\n-      { id: '1', name: 'File1.txt', type: 'file' },\n-      {\n-        id: '2',\n-        name: 'Folder1',\n-        type: 'directory',\n-        isOpen: false, // This directory is initially closed\n-        children: [\n-          { id: '3', name: 'File2.txt', type: 'file' },\n-        ],\n-      },\n-    ],\n-  };\n-\n-export const FileExplorer: React.FC<{ data: Directory }> = ({ data = sampleData }) => {\n-  const [rootDir, setRootDir] = useState<Directory>(data)\n-\n-  const toggleDirectory = (id: string) => {\n-    const toggle = (dir: Directory): Directory => ({\n-      ...dir,\n-      isOpen: dir.id === id ? !dir.isOpen : dir.isOpen,\n-      children: dir.children.map((child) =>\n-        child.type === \"directory\" ? toggle(child as Directory) : child\n-      ),\n-    })\n-\n-    setRootDir(toggle(rootDir))\n-  }\n-\n-  const renderDirectory = (dir: Directory) => (\n-    <li key={dir.id} onClick={() => toggleDirectory(dir.id)}>\n-      {dir.name}\n-      {dir.isOpen && (\n-        <ul>\n-          {dir.children.map((child) =>\n-            child.type === \"directory\" ? (\n-              renderDirectory(child as Directory)\n-            ) : (\n-              <li key={child.id}>{child.name}</li>\n-            )\n-          )}\n-        </ul>\n-      )}\n-    </li>\n-  )\n-\n-  return (\n-    <div>\n-      <h2>{rootDir.name}</h2>\n-      <ul>\n-        {rootDir.children.map((item) =>\n-          item.type === \"directory\" ? (\n-            renderDirectory(item as Directory)\n-          ) : (\n-            <li key={item.id}>{item.name}</li>\n-          )\n-        )}\n-      </ul>\n-    </div>\n-  )\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720564467710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \n export interface Directory {\n   id: string\n   name: string\n-  type: \"directory\"\n+  type: \"directory\" | root\n   children: Array<File | Directory>\n   isOpen?: boolean // Add this line\n }\n \n"
                },
                {
                    "date": 1720564472934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \n export interface Directory {\n   id: string\n   name: string\n-  type: \"directory\" | root\n+  type: \"directory\" | \"root\"\n   children: Array<File | Directory>\n   isOpen?: boolean // Add this line\n }\n \n"
                },
                {
                    "date": 1720564536466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,11 +13,9 @@\n   children: Array<File | Directory>\n   isOpen?: boolean // Add this line\n }\n \n-export const FileExplorer: React.FC<{ data: Directory }> = ({\n-  data,\n-}) => {\n+export const FileExplorer: React.FC<{ data: Directory }> = ({ data }) => {\n   const [rootDir, setRootDir] = useState<Directory>(data)\n \n   const toggleDirectory = (id: string) => {\n     const toggle = (dir: Directory): Directory => ({\n@@ -49,9 +47,8 @@\n   )\n \n   return (\n     <div>\n-      <h2>{rootDir.name}</h2>\n       <ul>\n         {rootDir.children.map((item) =>\n           item.type === \"directory\" ? (\n             renderDirectory(item as Directory)\n"
                },
                {
                    "date": 1720564587164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,11 +20,11 @@\n   const toggleDirectory = (id: string) => {\n     const toggle = (dir: Directory): Directory => ({\n       ...dir,\n       isOpen: dir.id === id ? !dir.isOpen : dir.isOpen,\n-      children: dir.children.map((child) =>\n-        child.type === \"directory\" ? toggle(child as Directory) : child\n-      ),\n+    //   children: dir.children.map((child) =>\n+    //     child.type === \"directory\" ? toggle(child as Directory) : child\n+    //   ),\n     })\n \n     setRootDir(toggle(rootDir))\n   }\n"
                },
                {
                    "date": 1720566202173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,16 +15,17 @@\n }\n \n export const FileExplorer: React.FC<{ data: Directory }> = ({ data }) => {\n   const [rootDir, setRootDir] = useState<Directory>(data)\n+  \n \n   const toggleDirectory = (id: string) => {\n     const toggle = (dir: Directory): Directory => ({\n       ...dir,\n       isOpen: dir.id === id ? !dir.isOpen : dir.isOpen,\n-    //   children: dir.children.map((child) =>\n-    //     child.type === \"directory\" ? toggle(child as Directory) : child\n-    //   ),\n+      //   children: dir.children.map((child) =>\n+      //     child.type === \"directory\" ? toggle(child as Directory) : child\n+      //   ),\n     })\n \n     setRootDir(toggle(rootDir))\n   }\n"
                },
                {
                    "date": 1720566210395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n }\n \n export const FileExplorer: React.FC<{ data: Directory }> = ({ data }) => {\n   const [rootDir, setRootDir] = useState<Directory>(data)\n-  \n+  useFileExplorer\n \n   const toggleDirectory = (id: string) => {\n     const toggle = (dir: Directory): Directory => ({\n       ...dir,\n"
                },
                {
                    "date": 1720566219420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n }\n \n export const FileExplorer: React.FC<{ data: Directory }> = ({ data }) => {\n   const [rootDir, setRootDir] = useState<Directory>(data)\n-  useFileExplorer\n+  const {} = useFileExplorer();\n \n   const toggleDirectory = (id: string) => {\n     const toggle = (dir: Directory): Directory => ({\n       ...dir,\n"
                },
                {
                    "date": 1720566227865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import React, { useState } from \"react\"\n+import { useFileExplorer } from \"../../contexts/FileExplorer/FileExplorerProvider\"\n \n export interface File {\n   id: string\n   name: string\n@@ -15,9 +16,9 @@\n }\n \n export const FileExplorer: React.FC<{ data: Directory }> = ({ data }) => {\n   const [rootDir, setRootDir] = useState<Directory>(data)\n-  const {} = useFileExplorer();\n+  const {op} = useFileExplorer();\n \n   const toggleDirectory = (id: string) => {\n     const toggle = (dir: Directory): Directory => ({\n       ...dir,\n"
                },
                {
                    "date": 1720566241235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n }\n \n export const FileExplorer: React.FC<{ data: Directory }> = ({ data }) => {\n   const [rootDir, setRootDir] = useState<Directory>(data)\n-  const {op} = useFileExplorer();\n+  const {openFolderById} = useFileExplorer();\n \n   const toggleDirectory = (id: string) => {\n     const toggle = (dir: Directory): Directory => ({\n       ...dir,\n"
                },
                {
                    "date": 1720566246791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n }\n \n export const FileExplorer: React.FC<{ data: Directory }> = ({ data }) => {\n   const [rootDir, setRootDir] = useState<Directory>(data)\n-  const {openFolderById, to} = useFileExplorer();\n+  const {openFolderById, toggleDirectory} = useFileExplorer();\n \n   const toggleDirectory = (id: string) => {\n     const toggle = (dir: Directory): Directory => ({\n       ...dir,\n"
                },
                {
                    "date": 1720567291491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,54 @@\n+import React, { useState } from \"react\"\n+import { useFileExplorer } from \"../../contexts/FileExplorer/FileExplorerProvider\"\n+\n+export interface File {\n+  id: string\n+  name: string\n+  type: \"file\"\n+}\n+\n+export interface Directory {\n+  id: string\n+  name: string\n+  type: \"directory\" | \"root\"\n+  children: Array<File | Directory>\n+  isOpen?: boolean // Add this line\n+}\n+\n+export const FileExplorer: React.FC<{ data: Directory }> = ({ data }) => {\n+  const [rootDir, setRootDir] = useState<Directory>(data)\n+  const { openFolderById, toggleDirectory } = useFileExplorer();\n+\n+  const handle\n+\n+  const renderDirectory = (dir: Directory) => (\n+    <li key={dir.id} onClick={(e) => toggleDirectory(dir.id)}>\n+      {dir.name}\n+      {openFolderById[dir.id] && (\n+        <ul>\n+          {dir.children.map((child) =>\n+            child.type === \"directory\" ? (\n+              renderDirectory(child as Directory)\n+            ) : (\n+              <li key={child.id}>{child.name}</li>\n+            )\n+          )}\n+        </ul>\n+      )}\n+    </li>\n+  )\n+\n+  return (\n+    <div>\n+      <ul>\n+        {rootDir.children.map((item) =>\n+          item.type === \"directory\" ? (\n+            renderDirectory(item as Directory)\n+          ) : (\n+            <li key={item.id}>{item.name}</li>\n+          )\n+        )}\n+      </ul>\n+    </div>\n+  )\n+}\n"
                }
            ],
            "date": 1720559540139,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\n\nconst FileExplorer: React.FC<{ data: Directory }> = ({ data }) => {\n  const [rootDir, setRootDir] = useState<Directory>(data);\n\n  const toggleDirectory = (id: string) => {\n    const toggle = (dir: Directory): Directory => ({\n      ...dir,\n      isOpen: dir.id === id ? !dir.isOpen : dir.isOpen,\n      children: dir.children.map(child => child.type === 'directory' ? toggle(child as Directory) : child),\n    });\n\n    setRootDir(toggle(rootDir));\n  };\n\n  const renderDirectory = (dir: Directory) => (\n    <li key={dir.id} onClick={() => toggleDirectory(dir.id)}>\n      {dir.name}\n      {dir.isOpen && <ul>{dir.children.map(child => child.type === 'directory' ? renderDirectory(child as Directory) : <li key={child.id}>{child.name}</li>)}</ul>}\n    </li>\n  );\n\n  return (\n    <div>\n      <h2>{rootDir.name}</h2>\n      <ul>\n        {rootDir.children.map(item => item.type === 'directory' ? renderDirectory(item as Directory) : <li key={item.id}>{item.name}</li>)}\n      </ul>\n    </div>\n  );\n};"
        }
    ]
}